import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, ChevronRight, Home, Building2, FileText, AlertTriangle, CheckCircle, BarChart3, FileDown, Maximize2, Minimize2 } from 'lucide-react';
import { cn } from './lib/utils';
import { 
  exportToPowerPoint, 
  exportToPDF, 
  exportToHTML, 
  exportToText
} from './lib/exportUtils';
import IntroAnimation from './components/IntroAnimation';

// Componente de navega√ß√£o por pontos
const NavigationDots = ({ currentSlide, totalSlides, onSlideChange }: {
  currentSlide: number
  totalSlides: number
  onSlideChange: (slide: number) => void
}) => {
  const icons = [Home, Building2, FileText, AlertTriangle, CheckCircle, BarChart3, FileDown]
  
  return (
    <div className="navigation-dots">
      {Array.from({ length: totalSlides }).map((_, index) => {
        const Icon = icons[index]
        return (
          <motion.div
            key={index}
            className={cn(
              "nav-dot flex items-center justify-center",
              currentSlide === index && "active"
            )}
            onClick={() => onSlideChange(index)}
            whileHover={{ scale: 1.2 }}
            whileTap={{ scale: 0.9 }}
          >
            {currentSlide === index && (
              <motion.div
                initial={{ opacity: 0, scale: 0 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.2 }}
              >
                <Icon className="w-2 h-2 text-white" />
              </motion.div>
            )}
          </motion.div>
        )
      })}
    </div>
  )
}

// Componente de slide
const Slide = ({ children, isActive }: { children: React.ReactNode, isActive: boolean }) => (
  <motion.div
    initial={{ opacity: 0, y: 50 }}
    animate={{ opacity: isActive ? 1 : 0, y: isActive ? 0 : 50 }}
    exit={{ opacity: 0, y: -50 }}
    transition={{ duration: 0.5, ease: "easeInOut" }}
    className="slide-container"
  >
    {children}
  </motion.div>
)

function App() {
  const [currentSlide, setCurrentSlide] = useState(0)
  const [isFullScreen, setIsFullScreen] = useState(false)
  const [showIntro, setShowIntro] = useState(true)
  const totalSlides = 7

  // Navega√ß√£o por teclado
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (event.key === 'ArrowRight' || event.key === ' ') {
        setCurrentSlide(prev => Math.min(prev + 1, totalSlides - 1))
      } else if (event.key === 'ArrowLeft') {
        setCurrentSlide(prev => Math.max(prev - 1, 0))
      } else if (event.key === 'Home') {
        setCurrentSlide(0)
      } else if (event.key === 'End') {
        setCurrentSlide(totalSlides - 1)
      } else if (event.key === 'F11' || event.key === 'f') {
        toggleFullScreen()
      }
    }

    window.addEventListener('keydown', handleKeyPress)
    return () => window.removeEventListener('keydown', handleKeyPress)
  }, [totalSlides])

  const nextSlide = () => setCurrentSlide(prev => Math.min(prev + 1, totalSlides - 1))
  const prevSlide = () => setCurrentSlide(prev => Math.max(prev - 1, 0))
  
  // Fun√ß√£o para finalizar anima√ß√£o de entrada
  const handleIntroComplete = () => {
    setShowIntro(false)
  }
  
  // Fun√ß√£o para alternar full-screen
  const toggleFullScreen = async () => {
    try {
      if (!document.fullscreenElement) {
        await document.documentElement.requestFullscreen()
        setIsFullScreen(true)
      } else {
        await document.exitFullscreen()
        setIsFullScreen(false)
      }
    } catch (error) {
      console.error('Erro ao alternar full-screen:', error)
    }
  }

  // Fun√ß√£o para lidar com exporta√ß√µes
  const handleExport = async (type: string) => {
    try {
      switch (type) {
        case 'exportPPTX':
          await exportToPowerPoint()
          break
        case 'exportPDF':
          await exportToPDF()
          break
        case 'exportHTML':
          exportToHTML()
          break
        case 'exportText':
          exportToText()
          break
        default:
          break
      }
    } catch (error) {
      console.error('Erro na exporta√ß√£o:', error)
      alert('Erro ao exportar. Tente novamente.')
    }
  }

  return (
    <div className="min-h-screen bg-black text-white overflow-hidden">
      {/* Anima√ß√£o de entrada */}
      {showIntro && (
        <IntroAnimation onComplete={handleIntroComplete} />
      )}
      
      {/* Barra de ferramentas no canto superior direito */}
      <div className="fixed top-8 right-8 z-50 flex items-center gap-4">
        {/* Indicador de slide atual */}
        <div className="px-4 py-2 rounded-full bg-white/10 backdrop-blur-sm border border-white/20">
          <span className="text-white font-medium">
            {currentSlide + 1} / {totalSlides}
          </span>
        </div>
        
        {/* Bot√µes de navega√ß√£o */}
        <motion.button
          onClick={prevSlide}
          disabled={currentSlide === 0}
          className={cn(
            "p-3 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 text-white transition-all",
            currentSlide === 0 ? "opacity-50 cursor-not-allowed" : "hover:bg-white/20 hover:scale-110"
          )}
          whileHover={currentSlide !== 0 ? { scale: 1.1 } : {}}
          whileTap={{ scale: 0.95 }}
          title="Slide anterior"
        >
          <ChevronLeft className="w-6 h-6" />
        </motion.button>
        
        <motion.button
          onClick={nextSlide}
          disabled={currentSlide === totalSlides - 1}
          className={cn(
            "p-3 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 text-white transition-all",
            currentSlide !== totalSlides - 1 ? "hover:bg-white/20 hover:scale-110" : "opacity-50 cursor-not-allowed"
          )}
          whileHover={currentSlide !== totalSlides - 1 ? { scale: 1.1 } : {}}
          whileTap={{ scale: 0.95 }}
          title="Pr√≥ximo slide"
        >
          <ChevronRight className="w-6 h-6" />
        </motion.button>
        
        {/* Bot√£o Full-Screen */}
        <motion.button
          onClick={toggleFullScreen}
          className="p-3 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 text-white transition-all hover:bg-white/20 hover:scale-110"
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.95 }}
          title={isFullScreen ? "Sair do modo tela cheia" : "Modo tela cheia"}
        >
          {isFullScreen ? (
            <Minimize2 className="w-6 h-6" />
          ) : (
            <Maximize2 className="w-6 h-6" />
          )}
        </motion.button>
      </div>

      {/* Navega√ß√£o por pontos */}
      {!showIntro && (
        <NavigationDots
          currentSlide={currentSlide}
          totalSlides={totalSlides}
          onSlideChange={setCurrentSlide}
        />
      )}

      {/* Slides */}
      {!showIntro && (
        <AnimatePresence mode="wait">
        {currentSlide === 0 && (
          <Slide key="slide-0" isActive={currentSlide === 0}>
            <div className="slide-content">
              <div className="flex items-center justify-between gap-16">
                <div className="flex-1 text-left">
                  <motion.h1 
                    className="slide-title text-white"
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8, delay: 0.2 }}
                  >
                    Legaliza√ß√£o e Infraestrutura
                  </motion.h1>
                  <motion.p 
                    className="slide-subtitle"
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8, delay: 0.4 }}
                  >
                    Setor de Infraestrutura e Legaliza√ß√£o
                  </motion.p>
                </div>
                
                <motion.div
                  initial={{ opacity: 0, x: 50 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.8, delay: 0.4 }}
                  className="flex-shrink-0"
                >
                  <img 
                    src="/logo.png" 
                    alt="Logo da Empresa" 
                    className="w-64 h-64 object-contain transform rotate-90"
                  />
                </motion.div>
              </div>
            </div>
          </Slide>
        )}

        {currentSlide === 1 && (
          <Slide key="slide-1" isActive={currentSlide === 1}>
            <div className="slide-content">
              <motion.h1 
                className="slide-title text-white text-4xl md:text-6xl"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
              >
                Servi√ßos de Responsabilidade do Setor
              </motion.h1>
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.4 }}
                className="mt-12"
              >
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4">
                  {[
                    { name: "Transplante Capilar", icon: "üíá‚Äç‚ôÇÔ∏è" },
                    { name: "Cirurgia Pl√°stica", icon: "üë®‚Äç‚öïÔ∏è" },
                    { name: "Dermatologia", icon: "üî¨" },
                    { name: "Anestesiologia", icon: "üíâ" },
                    { name: "Enfermagem", icon: "üë©‚Äç‚öïÔ∏è" },
                    { name: "Fisioterapia", icon: "üèÉ‚Äç‚ôÇÔ∏è" },
                    { name: "Nutri√ß√£o", icon: "ü•ó" },
                    { name: "Psicologia", icon: "üß†" },
                    { name: "Farmacologia", icon: "üíä" },
                    { name: "Radiologia", icon: "üì∑" },
                    { name: "Laborat√≥rio", icon: "üß™" },
                    { name: "UTI", icon: "üè•" },
                    { name: "Centro Cir√∫rgico", icon: "‚öïÔ∏è" },
                    { name: "Ambulat√≥rio", icon: "üöë" },
                    { name: "Pronto Socorro", icon: "üö®" },
                    { name: "Hemodin√¢mica", icon: "‚ù§Ô∏è" },
                    { name: "Endoscopia", icon: "üîç" },
                    { name: "Tomografia", icon: "üîÑ" },
                    { name: "Resson√¢ncia", icon: "üß≤" },
                    { name: "Ultrassom", icon: "üì°" },
                    { name: "Eletrocardiograma", icon: "üìà" }
                  ].map((service, index) => (
                    <motion.div
                      key={index}
                      className="card p-4"
                      initial={{ opacity: 0, y: 30 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.6, delay: 0.6 + index * 0.05 }}
                      whileHover={{ y: -5, scale: 1.02 }}
                    >
                      <div className="text-3xl mb-3 text-center">{service.icon}</div>
                      <h3 className="text-sm font-semibold text-white text-center leading-tight">{service.name}</h3>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </div>
          </Slide>
        )}

        {currentSlide === 2 && (
          <Slide key="slide-2" isActive={currentSlide === 2}>
            <div className="slide-content">
              <motion.h1 
                className="slide-title text-white text-4xl md:text-6xl"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
              >
                Alvar√° Sanit√°rio
              </motion.h1>
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.4 }}
                className="mt-12"
              >
                <div className="card p-6">
                  <h3 className="text-2xl font-semibold text-white mb-6 text-center">Status das Cl√≠nicas</h3>
                  <div className="table-container">
                    <table className="w-full text-sm">
                      <thead>
                        <tr className="border-b border-white/20">
                          <th className="text-left p-3 text-white font-semibold">Cl√≠nicas</th>
                          <th className="text-left p-3 text-white font-semibold">TIPO</th>
                          <th className="text-left p-3 text-white font-semibold">Aprova√ß√£o LTA</th>
                          <th className="text-left p-3 text-white font-semibold">Alvar√° Sanit√°rio</th>
                          <th className="text-left p-3 text-white font-semibold">Validade</th>
                        </tr>
                      </thead>
                      <tbody>
                        {[
                          { clinica: "SP Indian√≥polis", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "03/05/2026" },
                          { clinica: "RJ Barra da Tijuca", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "30/04/2026" },
                          { clinica: "SP Alphaville 26¬™", tipo: "Tipo I", lta: "N√£o precisa", alvara: "Sim", validade: "12/12/2025" },
                          { clinica: "MG BH", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "17/07/2025 (Aguardando visita para renova√ß√£o)" },
                          { clinica: "BA Salvador", tipo: "Tipo I", lta: "Sim", alvara: "Sim", validade: "31/12/2025" },
                          { clinica: "SC Balne√°rio", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "31/12/2025" },
                          { clinica: "DF Bras√≠lia I*", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "Aguardando cl√≠nica iniciar opera√ß√µes - 01/2026" },
                          { clinica: "PE Recife", tipo: "Tipo II", lta: "Protocolo", alvara: "Sim", validade: "23/10/2026 (somente para Tipo I)" },
                          { clinica: "ES Vitoria", tipo: "Tipo II", lta: "N√£o precisa", alvara: "Sim", validade: "28/02/2029" },
                          { clinica: "GO Jardim America", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "31/12/2025" },
                          { clinica: "SP Tatuap√©", tipo: "Tipo II", lta: "N√£o precisa", alvara: "Sim", validade: "28/11/2027" },
                          { clinica: "DF Bras√≠lia II", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "18/01/2026" },
                          { clinica: "RJ Copacabana", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "30/4/2026" },
                          { clinica: "MG Uberlandia", tipo: "Tipo II", lta: "Protocolo", alvara: "Sim", validade: "4/7/2028" },
                          { clinica: "SP Jardins", tipo: "Tipo I", lta: "N√£o precisa", alvara: "Sim", validade: "11/10/2026" },
                          { clinica: "DF Bras√≠lia III", tipo: "Tipo II", lta: "Sim", alvara: "Sim", validade: "30/04/2025 - Aguardando visita" }
                        ].map((row, index) => (
                          <motion.tr
                            key={index}
                            className="border-b border-white/10 hover:bg-white/5 transition-colors"
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.5, delay: 0.6 + index * 0.05 }}
                          >
                            <td className="p-3 text-white font-medium">{row.clinica}</td>
                            <td className="p-3 text-gray-300">{row.tipo}</td>
                            <td className="p-3 text-gray-300">
                              {row.lta === 'Sim' ? (
                                <span className="status-badge status-approved">Sim</span>
                              ) : row.lta === 'N√£o precisa' ? (
                                <span className="status-badge status-not-needed">N√£o precisa</span>
                              ) : (
                                <span className="status-badge status-protocol">Protocolo</span>
                              )}
                            </td>
                            <td className="p-3 text-gray-300">
                              {row.alvara === 'Sim' ? (
                                <span className="status-badge status-approved">Sim</span>
                              ) : (
                                <span className="status-badge status-protocol">Protocolo</span>
                              )}
                            </td>
                            <td className="p-3 text-gray-300 text-xs">{row.validade}</td>
                          </motion.tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </motion.div>
            </div>
          </Slide>
        )}

        {currentSlide === 3 && (
          <Slide key="slide-3" isActive={currentSlide === 3}>
            <div className="slide-content">
              <motion.h1 
                className="slide-title text-white text-4xl md:text-6xl"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
              >
                Maiores Dificuldades
              </motion.h1>
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.4 }}
                className="mt-12"
              >
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {[
                    {
                      title: "Inadequa√ß√£o da infraestrutura f√≠sica √† RDC 50",
                      icon: "üèóÔ∏è"
                    },
                    {
                      title: "Alto volume de den√∫ncias e fiscaliza√ß√µes",
                      icon: "üìã"
                    },
                    {
                      title: "Escassez de profissionais com RQE para atuar como RT",
                      icon: "üë®‚Äç‚öïÔ∏è"
                    },
                    {
                      title: "V√°cuo legislativo para transplante capilar",
                      icon: "‚öñÔ∏è"
                    },
                    {
                      title: "Inconsist√™ncia t√©cnica nas fiscaliza√ß√µes",
                      icon: "üîç"
                    },
                    {
                      title: "Press√µes e interfer√™ncias externas na opera√ß√£o",
                      icon: "‚ö†Ô∏è"
                    }
                  ].map((difficulty, index) => (
                    <motion.div
                      key={index}
                      className="card p-6"
                      initial={{ opacity: 0, y: 30 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.6, delay: 0.6 + index * 0.1 }}
                      whileHover={{ y: -5, scale: 1.02 }}
                    >
                      <div className="text-4xl mb-4 text-center">{difficulty.icon}</div>
                      <h3 className="text-lg font-semibold text-white text-center leading-tight">{difficulty.title}</h3>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </div>
          </Slide>
        )}

        {currentSlide === 4 && (
          <Slide key="slide-4" isActive={currentSlide === 4}>
            <div className="slide-content">
              <motion.h1 
                className="slide-title text-white text-4xl md:text-6xl"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
              >
                Unidades em Processo de Libera√ß√£o
              </motion.h1>
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.4 }}
                className="mt-12"
              >
                <div className="card p-6">
                  <h3 className="text-2xl font-semibold text-white mb-6 text-center">Status das Unidades em Processo</h3>
                  <div className="table-container">
                    <table className="w-full text-sm">
                      <thead>
                        <tr className="border-b border-white/20">
                          <th className="text-left p-3 text-white font-semibold">Cl√≠nicas</th>
                          <th className="text-left p-3 text-white font-semibold">TIPO</th>
                          <th className="text-left p-3 text-white font-semibold">Aprova√ß√£o LTA</th>
                          <th className="text-left p-3 text-white font-semibold">Alvar√° Sanit√°rio</th>
                          <th className="text-left p-3 text-white font-semibold">Validade</th>
                        </tr>
                      </thead>
                      <tbody>
                        {[
                          { clinica: "Cuiab√°", tipo: "Tipo II", lta: "Protocolo", alvara: "Protocolo", validade: "Protocolo inicial em 05/2023 - refeito em 07/2024" },
                          { clinica: "Manaus", tipo: "Tipo II", lta: "Sim", alvara: "Protocolo", validade: "Protocolo desde 04/2024" },
                          { clinica: "Porto Velho", tipo: "Tipo II", lta: "N√£o precisa", alvara: "Protocolo", validade: "" },
                          { clinica: "Porto Alegre", tipo: "Tipo II", lta: "Protocolo", alvara: "Protocolo", validade: "Protocolo desde 11.2023. Cl√≠nica aprovada pela fiscaliza√ß√£o sanit√°ria aguardando libera√ß√£o do projeto." },
                          { clinica: "Florianopolis", tipo: "Tipo II", lta: "Protocolo", alvara: "Protocolo", validade: "" },
                          { clinica: "Ribeir√£o Preto", tipo: "Tipo II", lta: "Sim", alvara: "Protocolo", validade: "Protocolo desde 11/2024" },
                          { clinica: "Campinas II", tipo: "Tipo II", lta: "N√£o precisa", alvara: "Protocolo", validade: "Renova√ß√£o cancelada" },
                          { clinica: "Mogi das Cruzes*", tipo: "Tipo II", lta: "N√£o precisa", alvara: "Protocolo", validade: "Protocolo desde 04/2024" },
                          { clinica: "Aracaju*", tipo: "Tipo II", lta: "N√£o precisa", alvara: "Protocolo", validade: "Protocolo inicial em 01/2024 - Renovado em 06/2025" },
                          { clinica: "Montes Claros", tipo: "Tipo II", lta: "N√£o precisa", alvara: "Protocolo", validade: "-" }
                        ].map((row, index) => (
                          <motion.tr
                            key={index}
                            className="border-b border-white/10 hover:bg-white/5 transition-colors"
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.5, delay: 0.6 + index * 0.05 }}
                          >
                            <td className="p-3 text-white font-medium">{row.clinica}</td>
                            <td className="p-3 text-gray-300">{row.tipo}</td>
                            <td className="p-3 text-gray-300">
                              {row.lta === 'Sim' ? (
                                <span className="status-badge status-approved">Sim</span>
                              ) : row.lta === 'N√£o precisa' ? (
                                <span className="status-badge status-not-needed">N√£o precisa</span>
                              ) : (
                                <span className="status-badge status-protocol">Protocolo</span>
                              )}
                            </td>
                            <td className="p-3 text-gray-300">
                              {row.alvara === 'Sim' ? (
                                <span className="status-badge status-approved">Sim</span>
                              ) : (
                                <span className="status-badge status-protocol">Protocolo</span>
                              )}
                            </td>
                            <td className="p-3 text-gray-300 text-xs">{row.validade}</td>
                          </motion.tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </motion.div>
            </div>
          </Slide>
        )}

        {currentSlide === 5 && (
          <Slide key="slide-5" isActive={currentSlide === 5}>
            <div className="slide-content">
              <motion.h1 
                className="slide-title text-white text-4xl md:text-6xl"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
              >
                Overview de Problemas
              </motion.h1>
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.4 }}
                className="mt-12"
              >
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  {[
                    {
                      clinica: "Cuiab√°",
                      icon: "üèóÔ∏è",
                      status: "Fase final de libera√ß√£o Tipo I",
                      description: "A unidade passou por processo rigoroso de regulariza√ß√£o junto √† Vigil√¢ncia Sanit√°ria, motivado por den√∫ncia que resultou em interdi√ß√£o tempor√°ria. Durante a fiscaliza√ß√£o, foram exigidas diversas adequa√ß√µes, incluindo obras estruturais significativas. Todas as exig√™ncias foram devidamente atendidas, demonstrando o comprometimento da equipe com a conformidade e qualidade do servi√ßo. Atualmente, a cl√≠nica encontra-se em fase final de libera√ß√£o para opera√ß√£o como Tipo I, sendo que a classifica√ß√£o Tipo II ainda requer algumas interven√ß√µes adicionais."
                    },
                    {
                      clinica: "Manaus",
                      icon: "üîß",
                      status: "Projeto aprovado, obras em andamento",
                      description: "Em Manaus, a unidade enfrentou desafios estruturais que demandaram m√∫ltiplas obras e ajustes para atender √†s normas da Vigil√¢ncia Sanit√°ria. Ap√≥s um per√≠odo de trabalho intenso, o projeto foi recentemente aprovado, embora algumas interven√ß√µes ainda estejam em andamento. O processo evidencia o empenho da equipe em garantir a total adequa√ß√£o da unidade, seguindo todas as exig√™ncias legais e estruturais para opera√ß√£o segura e eficiente."
                    },
                    {
                      clinica: "Porto Alegre",
                      icon: "‚úÖ",
                      status: "Validada pela Vigil√¢ncia Sanit√°ria",
                      description: "A cl√≠nica de Porto Alegre j√° foi validada pela Vigil√¢ncia Sanit√°ria, o que confirma a conformidade da unidade com os requisitos essenciais de opera√ß√£o. No momento, aguarda-se apenas a conclus√£o da an√°lise do projeto para que possa obter a libera√ß√£o final, permitindo a continuidade das atividades dentro dos padr√µes exigidos."
                    },
                    {
                      clinica: "Florian√≥polis",
                      icon: "üìã",
                      status: "Projeto aprovado, obra pendente",
                      description: "Em Florian√≥polis, a unidade passou por um longo processo de aprova√ß√£o do projeto, que envolveu diversas idas e vindas e ajustes estruturais. Apesar de o projeto ter sido aprovado, ainda √© necess√°ria a realiza√ß√£o de uma obra de adequa√ß√£o para que a cl√≠nica esteja totalmente pronta para libera√ß√£o. Esse processo demonstra o cuidado da equipe em garantir que a unidade atenda integralmente √†s normas de seguran√ßa e qualidade."
                    },
                    {
                      clinica: "Ribeir√£o Preto",
                      icon: "üéØ",
                      status: "Fase final, pend√™ncia RT",
                      description: "A unidade de Ribeir√£o Preto est√° em fase final de libera√ß√£o. A cl√≠nica foi vistoriada e recebeu elogios da Vigil√¢ncia Sanit√°ria, com o projeto totalmente aprovado. No entanto, a libera√ß√£o formal ainda depende da regulariza√ß√£o de uma pend√™ncia do Respons√°vel T√©cnico junto ao CRM. A expectativa √© que, assim que essa quest√£o seja solucionada, a cl√≠nica esteja plenamente operacional."
                    }
                  ].map((clinica, index) => (
                    <motion.div
                      key={index}
                      className="card p-6"
                      initial={{ opacity: 0, y: 30 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.6, delay: 0.6 + index * 0.1 }}
                      whileHover={{ y: -5, scale: 1.02 }}
                    >
                      <div className="flex items-start gap-4">
                        <div className="text-3xl flex-shrink-0">{clinica.icon}</div>
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-3">
                            <h3 className="text-xl font-semibold text-white">{clinica.clinica}</h3>
                            <span className="px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-white/20 to-gray-600/20 text-white border border-white/20">
                              {clinica.status}
                            </span>
                          </div>
                          <p className="text-gray-300 text-sm leading-relaxed">{clinica.description}</p>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </div>
          </Slide>
        )}

        {currentSlide === 6 && (
          <Slide key="slide-6" isActive={currentSlide === 6}>
            <div className="slide-content">
              <motion.h1 
                className="slide-title text-white text-4xl md:text-6xl"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
              >
                Exportar Apresenta√ß√£o
              </motion.h1>
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.4 }}
                className="mt-12"
              >
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                  {[
                    {
                      title: "PowerPoint (.pptx)",
                      icon: "üìä",
                      description: "Exportar como apresenta√ß√£o PowerPoint nativa",
                      action: "exportPPTX",
                      color: "from-blue-500/20 to-blue-600/20"
                    },
                    {
                      title: "PDF",
                      icon: "üìÑ",
                      description: "Gerar documento PDF para impress√£o",
                      action: "exportPDF",
                      color: "from-red-500/20 to-red-600/20"
                    },
                    {
                      title: "Google Slides",
                      icon: "‚òÅÔ∏è",
                      description: "Enviar para Google Slides (requer login)",
                      action: "exportGoogle",
                      color: "from-green-500/20 to-green-600/20"
                    },
                    {
                      title: "Imagem (PNG)",
                      icon: "üñºÔ∏è",
                      description: "Exportar cada slide como imagem",
                      action: "exportImages",
                      color: "from-purple-500/20 to-purple-600/20"
                    },
                    {
                      title: "HTML",
                      icon: "üåê",
                      description: "Gerar arquivo HTML standalone",
                      action: "exportHTML",
                      color: "from-orange-500/20 to-orange-600/20"
                    },
                    {
                      title: "Texto (.txt)",
                      icon: "üìù",
                      description: "Extrair apenas o texto da apresenta√ß√£o",
                      action: "exportText",
                      color: "from-gray-500/20 to-gray-600/20"
                    }
                  ].map((option, index) => (
                    <motion.div
                      key={index}
                      className={`card p-6 bg-gradient-to-br ${option.color} cursor-pointer`}
                      initial={{ opacity: 0, y: 30 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.6, delay: 0.6 + index * 0.1 }}
                      whileHover={{ y: -8, scale: 1.03 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => handleExport(option.action)}
                    >
                      <div className="text-center">
                        <div className="text-5xl mb-4">{option.icon}</div>
                        <h3 className="text-xl font-semibold text-white mb-3">{option.title}</h3>
                        <p className="text-gray-300 text-sm mb-4">{option.description}</p>
                        <button className="px-4 py-2 bg-white/20 hover:bg-white/30 text-white rounded-lg transition-colors border border-white/30">
                          Exportar
                        </button>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </div>
          </Slide>
        )}
        </AnimatePresence>
      )}
    </div>
  )
}

export default App
